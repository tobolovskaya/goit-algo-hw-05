# -*- coding: utf-8 -*-
"""ДЗ5_Тоболовська Євгенія.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NDwGS0tbHhn8dBThFqdGHeFvoZArIsYS

Завдання 1
"""

class HashTable:
    # ... Інші частини класу HashTable ...

    def delete(self, key):
        """Видаляє пару ключ-значення за заданим ключем."""
        hash_key = self._hash_function(key)
        key_exists = False
        bucket = self.array[hash_key]
        for i, kv in enumerate(bucket):
            k, v = kv
            if key == k:
                key_exists = True
                break
        if key_exists:
            del bucket[i]
            print(f"Пара ключ-значення для ключа '{key}' видалена.")
        else:
            print(f"Ключ '{key}' не знайдено.")

    # ... Решта методів класу HashTable ...

"""Завдання 2"""

def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    iterations = 0
    upper_bound = None

    while left <= right:
        iterations += 1
        mid = left + (right - left) // 2
        mid_value = arr[mid]

        if mid_value == target:
            # Знайдено точне значення, верхня межа знайдена
            upper_bound = mid_value
            break
        elif mid_value < target:
            left = mid + 1
        else:
            right = mid - 1
            upper_bound = mid_value  # Поточне значення є потенційною верхньою межею

    # Якщо верхня межа не знайдена, значить всі елементи менші за цільове значення
    if upper_bound is None:
        upper_bound = -1  # Або встановлюємо інше значення, що вказує на відсутність верхньої межі

    return (iterations, upper_bound)

# Тестування функції
sorted_array = [0.5, 1.2, 1.5, 2.3, 3.6, 4.1, 5.8]
target_value = 2.5
binary_search(sorted_array, target_value)

"""Завдання 3"""

def compute_lps(pattern):
    lps = [0] * len(pattern)
    length = 0
    i = 1

    while i < len(pattern):
        if pattern[i] == pattern[length]:
            length += 1
            lps[i] = length
            i += 1
        else:
            if length != 0:
                length = lps[length - 1]
            else:
                lps[i] = 0
                i += 1

    return lps

def kmp_search(main_string, pattern):
    M = len(pattern)
    N = len(main_string)

    lps = compute_lps(pattern)

    i = j = 0

    while i < N:
        if pattern[j] == main_string[i]:
            i += 1
            j += 1
        elif j != 0:
            j = lps[j - 1]
        else:
            i += 1

        if j == M:
            return i - j

    return -1  # якщо підрядок не знайдено

def build_shift_table(pattern):
    """Створити таблицю зсувів для алгоритму Боєра-Мура."""
    table = {}
    length = len(pattern)
    # Для кожного символу в підрядку встановлюємо зсув рівний довжині підрядка
    for index, char in enumerate(pattern[:-1]):
        table[char] = length - index - 1
    # Якщо символу немає в таблиці, зсув буде дорівнювати довжині підрядка
    table.setdefault(pattern[-1], length)
    return table

def boyer_moore_search(text, pattern):
    # Створюємо таблицю зсувів для патерну (підрядка)
    shift_table = build_shift_table(pattern)
    i = 0  # Ініціалізуємо початковий індекс для основного тексту

    # Проходимо по основному тексту, порівнюючи з підрядком
    while i <= len(text) - len(pattern):
        j = len(pattern) - 1  # Починаємо з кінця підрядка

        # Порівнюємо символи від кінця підрядка до його початку
        while j >= 0 and text[i + j] == pattern[j]:
            j -= 1  # Зсуваємось до початку підрядка

        # Якщо весь підрядок збігається, повертаємо його позицію в тексті
        if j < 0:
            return i  # Підрядок знайдено

        # Зсуваємо індекс i на основі таблиці зсувів
        # Це дозволяє "перестрибувати" над неспівпадаючими частинами тексту
        i += shift_table.get(text[i + len(pattern) - 1], len(pattern))

    # Якщо підрядок не знайдено, повертаємо -1
    return -1

def polynomial_hash(s, base=256, modulus=101):
    """
    Повертає поліноміальний хеш рядка s.
    """
    n = len(s)
    hash_value = 0
    for i, char in enumerate(s):
        power_of_base = pow(base, n - i - 1) % modulus
        hash_value = (hash_value + ord(char) * power_of_base) % modulus
    return hash_value

def rabin_karp_search(main_string, substring):
    # Довжини основного рядка та підрядка пошуку
    substring_length = len(substring)
    main_string_length = len(main_string)

    # Базове число для хешування та модуль
    base = 256
    modulus = 101

    # Хеш-значення для підрядка пошуку та поточного відрізка в основному рядку
    substring_hash = polynomial_hash(substring, base, modulus)
    current_slice_hash = polynomial_hash(main_string[:substring_length], base, modulus)

    # Попереднє значення для перерахунку хешу
    h_multiplier = pow(base, substring_length - 1) % modulus

    # Проходимо крізь основний рядок
    for i in range(main_string_length - substring_length + 1):
        if substring_hash == current_slice_hash:
            if main_string[i:i+substring_length] == substring:
                return i

        if i < main_string_length - substring_length:
            current_slice_hash = (current_slice_hash - ord(main_string[i]) * h_multiplier) % modulus
            current_slice_hash = (current_slice_hash * base + ord(main_string[i + substring_length])) % modulus
            if current_slice_hash < 0:
                current_slice_hash += modulus

    return -1

def read_file(file_path):
    with open(file_path, 'r', encoding='cp1251') as file:
        return file.read()


def measure_search_time(func, text, pattern):
    setup_code = f'''
from __main__ import {func.__name__}
'''
    stmt = f"{func.__name__}(text, pattern)"
    return timeit.timeit(stmt, setup=setup_code, globals={'text': text, 'pattern': pattern}, number=1)

import timeit

text1 = (read_file("article1.txt"), "article1.txt")
text2 = (read_file("article2.txt"), "article2.txt")

# Визначення підрядків для пошуку
existing_substring = "Література" # Рядок який є в двох статтях
fake_substring = "Двійковий або логарифмічний пошук часто використовується через швидкий час пошуку."

if __name__ == '__main__':

    # Вимірювання часу виконання
    results = []
    for text in [text1, text2]:
        for pattern in [existing_substring, fake_substring]:
            for search_func in [boyer_moore_search, kmp_search, rabin_karp_search]:
                time = measure_search_time(search_func, text[0], pattern)
                results.append((text[1], search_func.__name__, pattern, time))

    # Виведення результатів у вигляді таблиці
    print(f"{'Стаття':<30} | {'Алгоритм':<30} | {'Підрядок':<20} | {'Час (секунди)':<15}")
    print('-' * 70)
    for result in results:
        print(f"{result[0]:<30}, {result[1]:<30} | {result[2]:<20} | {result[3]:<15.5f}")

"""На основі аналізу отриманих даних, алгоритм Рабіна-Карпа показав найкращі результати швидкості виконання при пошуку існуючого підрядка у обох статтях, що може свідчити про його високу ефективність для текстів даного типу. Однак, при пошуку вигаданого підрядка, алгоритм Боєра-Мура виявився швидшим, особливо у випадку зі статтею 2, що може бути пов'язано з особливостями алгоритму обробки "невдалих" пошуків. Алгоритм Кнута-Морріса-Пратта показав середні результати в обох випадках, забезпечуючи стабільну продуктивність незалежно від наявності підрядка в тексті."""